on:
  push:
    branches:
      - master
      - 'v**-dev'
  pull_request:

name: Continuous integration

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  spv_tests:
    name: SPV Components Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Test dash-spv crate
        run: cargo test -p dash-spv --all-features
      - name: Test dash-spv-ffi crate
        run: cargo test -p dash-spv-ffi --all-features
      
  key_wallet_tests:
    name: Key Wallet Components Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Test key-wallet crate
        run: cargo test -p key-wallet --all-features
      - name: Test key-wallet-manager crate
        run: cargo test -p key-wallet-manager --all-features
      - name: Test key-wallet-ffi crate
        run: cargo test -p key-wallet-ffi --all-features
      
  core_components_tests:
    name: Core Components Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Test dashcore crate
        run: cargo test -p dashcore --all-features
      - name: Test dashcore_hashes crate
        run: cargo test -p dashcore_hashes --all-features
      - name: Test dash-network crate
        run: cargo test -p dash-network --all-features
      - name: Test internals crate
        run: cargo test -p dashcore-private --all-features
      - name: Run script-based tests
        run: ./contrib/test.sh
      
  clippy:
    name: Clippy (Non-strict)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Run clippy (excluding strict-checked crates)
        run: |
          # Auto-discover all workspace crates and exclude strict-checked ones
          STRICT_CRATES=("key-wallet" "key-wallet-manager" "key-wallet-ffi" "dashcore_hashes" "dashcore")
          mapfile -t ALL_CRATES < <(cargo metadata --no-deps --format-version=1 | jq -r '.packages[].name' | sort -u)
          for crate in "${ALL_CRATES[@]}"; do
            if printf '%s\n' "${STRICT_CRATES[@]}" | grep -qx "$crate"; then
              continue
            fi
            echo "Checking $crate (warnings allowed, errors will fail)..."
            cargo clippy -p "$crate" --all-features --all-targets -- -W warnings
          done
  
  strict-checks:
    name: Strict Warnings and Clippy Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      
      # Check key-wallet with strict warnings
      - name: Check key-wallet (deny warnings)
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check -p key-wallet --all-features --lib --bins --tests
          cargo build -p key-wallet --all-features --lib --bins
          cargo test -p key-wallet --all-features --lib --bins
      
      - name: Clippy key-wallet (deny all warnings)
        run: cargo clippy -p key-wallet --all-features --lib --bins --tests -- -D warnings
      
      # Check key-wallet-manager with strict warnings
      - name: Check key-wallet-manager (deny warnings)
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check -p key-wallet-manager --all-features --lib --bins --tests
          cargo build -p key-wallet-manager --all-features --lib --bins
          cargo test -p key-wallet-manager --all-features --lib --bins
      
      - name: Clippy key-wallet-manager (deny all warnings)
        run: cargo clippy -p key-wallet-manager --all-features --lib --bins --tests -- -D warnings
      
      # Check key-wallet-ffi with strict warnings
      - name: Check key-wallet-ffi (deny warnings)
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check -p key-wallet-ffi --all-features --lib --bins --tests
          cargo build -p key-wallet-ffi --all-features --lib --bins
          cargo test -p key-wallet-ffi --all-features --lib --bins
      
      - name: Clippy key-wallet-ffi (deny all warnings)
        run: cargo clippy -p key-wallet-ffi --all-features --lib --bins --tests -- -D warnings
      
      # Check dashcore with strict warnings
      - name: Check dashcore (deny warnings)
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check -p dashcore --all-features --lib --bins --tests
          cargo build -p dashcore --all-features --lib --bins
          cargo test -p dashcore --all-features --lib --bins
      
      - name: Clippy dashcore (deny all warnings)
        run: cargo clippy -p dashcore --all-features --lib --bins --tests -- -D warnings
      
      # Check dashcore_hashes with strict warnings
      - name: Check dashcore_hashes (deny warnings)
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check -p dashcore_hashes --all-features --lib --bins --tests
          cargo build -p dashcore_hashes --all-features --lib --bins
          cargo test -p dashcore_hashes --all-features --lib --bins
      
      - name: Clippy dashcore_hashes (deny all warnings)
        run: cargo clippy -p dashcore_hashes --all-features --lib --bins --tests -- -D warnings
  
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  rpc_tests:
    name: RPC Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
            env:
              PIN_VERSIONS: true
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Running test script
        env: ${{ matrix.env }}
        run: ./contrib/test.sh

  integrations_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
        dashversion: ["22.0.0", "22.1.3"]
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Running test script
        env:
          DASHVERSION: ${{ matrix.dashversion }}
        run: ./contrib/test-rpc.sh
