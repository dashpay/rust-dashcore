on: [push, pull_request]

name: Continuous integration

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Tests:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
            env:
              DO_COV: true
              AS_DEPENDENCY: true
              DO_NO_STD: false
          - rust: beta
            env:
              AS_DEPENDENCY: true
              DO_NO_STD: false
          - rust: nightly
            env:
              # TODO: running with DO_BENCH: true causes the test to fail
              #              DO_BENCH: true
              AS_DEPENDENCY: true
              DO_NO_STD: false
              DO_DOCS: true
          - rust: 1.89.0
            env:
              AS_DEPENDENCY: true
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      - name: Running test script
        env: ${{ matrix.env }}
        run: ./contrib/test.sh
      
  workspace-tests:
    name: Workspace Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta, nightly, 1.89.0]
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Run workspace tests
        run: cargo test --workspace --all-features
      - name: Run workspace tests (no default features)
        run: cargo test --workspace --no-default-features
      - name: Build workspace (release mode)
        run: cargo build --workspace --release
      
  clippy:
    name: Clippy (Non-strict)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy
      - name: Run clippy (excluding strict-checked crates)
        run: |
          # Auto-discover all workspace crates and exclude strict-checked ones
          STRICT_CRATES=("key-wallet" "key-wallet-manager" "key-wallet-ffi" "dashcore_hashes" "dashcore")
          mapfile -t ALL_CRATES < <(cargo metadata --no-deps --format-version=1 | jq -r '.packages[].name' | sort -u)
          for crate in "${ALL_CRATES[@]}"; do
            if printf '%s\n' "${STRICT_CRATES[@]}" | grep -qx "$crate"; then
              continue
            fi
            echo "Checking $crate (warnings allowed)..."
            cargo clippy -p "$crate" --all-features --all-targets || true
          done
  
  strict-checks:
    name: Strict Warnings and Clippy Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      
      # Check key-wallet with strict warnings
      - name: Check key-wallet (deny warnings)
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check -p key-wallet --all-features --lib --bins --tests
          cargo build -p key-wallet --all-features --lib --bins
          cargo test -p key-wallet --all-features --lib --bins
      
      - name: Clippy key-wallet (deny all warnings)
        run: cargo clippy -p key-wallet --all-features --lib --bins --tests -- -D warnings
      
      # Check key-wallet-manager with strict warnings
      - name: Check key-wallet-manager (deny warnings)
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check -p key-wallet-manager --all-features --lib --bins --tests
          cargo build -p key-wallet-manager --all-features --lib --bins
          cargo test -p key-wallet-manager --all-features --lib --bins
      
      - name: Clippy key-wallet-manager (deny all warnings)
        run: cargo clippy -p key-wallet-manager --all-features --lib --bins --tests -- -D warnings
      
      # Check key-wallet-ffi with strict warnings
      - name: Check key-wallet-ffi (deny warnings)
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check -p key-wallet-ffi --all-features --lib --bins --tests
          cargo build -p key-wallet-ffi --all-features --lib --bins
          cargo test -p key-wallet-ffi --all-features --lib --bins
      
      - name: Clippy key-wallet-ffi (deny all warnings)
        run: cargo clippy -p key-wallet-ffi --all-features --lib --bins --tests -- -D warnings
  
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  rpc_tests:
    name: RPC Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
            env:
              RUSTFMTCHK: true
          - rust: nightly
            env:
              RUSTFMTCHK: false
          - rust: 1.89.0
            env:
              PIN_VERSIONS: true
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      - name: Running test script
        env: ${{ matrix.env }}
        run: ./contrib/test.sh

  integrations_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
        dashversion: ["22.0.0", "22.1.3"]
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      - name: Running test script
        env:
          DASHVERSION: ${{ matrix.dashversion }}
        run: ./contrib/test-rpc.sh
