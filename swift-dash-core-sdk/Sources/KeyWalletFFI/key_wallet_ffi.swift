// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(key_wallet_ffiFFI)
import key_wallet_ffiFFI
#endif

// Import the C module that contains RustBuffer and other FFI types
import KeyWalletFFI

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_key_wallet_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_key_wallet_ffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureKeyWalletFfiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol AddressProtocol: AnyObject, Sendable {
    
    func getNetwork()  -> Network
    
    func getScriptPubkey()  -> [UInt8]
    
    func getType()  -> AddressType
    
    func toString()  -> String
    
}
open class Address: AddressProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_key_wallet_ffi_fn_clone_address(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_key_wallet_ffi_fn_free_address(pointer, $0) }
    }

    
public static func fromPublicKey(publicKey: [UInt8], network: Network)throws  -> Address  {
    return try  FfiConverterTypeAddress_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_constructor_address_from_public_key(
        FfiConverterSequenceUInt8.lower(publicKey),
        FfiConverterTypeNetwork_lower(network),$0
    )
})
}
    
public static func fromString(address: String, network: Network)throws  -> Address  {
    return try  FfiConverterTypeAddress_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_constructor_address_from_string(
        FfiConverterString.lower(address),
        FfiConverterTypeNetwork_lower(network),$0
    )
})
}
    

    
open func getNetwork() -> Network  {
    return try!  FfiConverterTypeNetwork_lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_address_get_network(self.uniffiClonePointer(),$0
    )
})
}
    
open func getScriptPubkey() -> [UInt8]  {
    return try!  FfiConverterSequenceUInt8.lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_address_get_script_pubkey(self.uniffiClonePointer(),$0
    )
})
}
    
open func getType() -> AddressType  {
    return try!  FfiConverterTypeAddressType_lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_address_get_type(self.uniffiClonePointer(),$0
    )
})
}
    
open func toString() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_address_to_string(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddress: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Address

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Address {
        return Address(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Address) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Address {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Address, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lift(_ pointer: UnsafeMutableRawPointer) throws -> Address {
    return try FfiConverterTypeAddress.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lower(_ value: Address) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAddress.lower(value)
}






public protocol AddressGeneratorProtocol: AnyObject, Sendable {
    
    func generate(accountXpub: AccountXPub, external: Bool, index: UInt32) throws  -> Address
    
    func generateRange(accountXpub: AccountXPub, external: Bool, start: UInt32, count: UInt32) throws  -> [Address]
    
}
open class AddressGenerator: AddressGeneratorProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_key_wallet_ffi_fn_clone_addressgenerator(self.pointer, $0) }
    }
public convenience init(network: Network) {
    let pointer =
        try! rustCall() {
    uniffi_key_wallet_ffi_fn_constructor_addressgenerator_new(
        FfiConverterTypeNetwork_lower(network),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_key_wallet_ffi_fn_free_addressgenerator(pointer, $0) }
    }

    

    
open func generate(accountXpub: AccountXPub, external: Bool, index: UInt32)throws  -> Address  {
    return try  FfiConverterTypeAddress_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_method_addressgenerator_generate(self.uniffiClonePointer(),
        FfiConverterTypeAccountXPub_lower(accountXpub),
        FfiConverterBool.lower(external),
        FfiConverterUInt32.lower(index),$0
    )
})
}
    
open func generateRange(accountXpub: AccountXPub, external: Bool, start: UInt32, count: UInt32)throws  -> [Address]  {
    return try  FfiConverterSequenceTypeAddress.lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_method_addressgenerator_generate_range(self.uniffiClonePointer(),
        FfiConverterTypeAccountXPub_lower(accountXpub),
        FfiConverterBool.lower(external),
        FfiConverterUInt32.lower(start),
        FfiConverterUInt32.lower(count),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddressGenerator: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AddressGenerator

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AddressGenerator {
        return AddressGenerator(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AddressGenerator) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressGenerator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AddressGenerator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressGenerator_lift(_ pointer: UnsafeMutableRawPointer) throws -> AddressGenerator {
    return try FfiConverterTypeAddressGenerator.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressGenerator_lower(_ value: AddressGenerator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAddressGenerator.lower(value)
}






public protocol ExtPrivKeyProtocol: AnyObject, Sendable {
    
    func deriveChild(index: UInt32, hardened: Bool) throws  -> ExtPrivKey
    
    func getXpub()  -> AccountXPub
    
    func toString()  -> String
    
}
open class ExtPrivKey: ExtPrivKeyProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_key_wallet_ffi_fn_clone_extprivkey(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_key_wallet_ffi_fn_free_extprivkey(pointer, $0) }
    }

    
public static func fromString(xpriv: String)throws  -> ExtPrivKey  {
    return try  FfiConverterTypeExtPrivKey_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_constructor_extprivkey_from_string(
        FfiConverterString.lower(xpriv),$0
    )
})
}
    

    
open func deriveChild(index: UInt32, hardened: Bool)throws  -> ExtPrivKey  {
    return try  FfiConverterTypeExtPrivKey_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_method_extprivkey_derive_child(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(index),
        FfiConverterBool.lower(hardened),$0
    )
})
}
    
open func getXpub() -> AccountXPub  {
    return try!  FfiConverterTypeAccountXPub_lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_extprivkey_get_xpub(self.uniffiClonePointer(),$0
    )
})
}
    
open func toString() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_extprivkey_to_string(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeExtPrivKey: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ExtPrivKey

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ExtPrivKey {
        return ExtPrivKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ExtPrivKey) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExtPrivKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ExtPrivKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExtPrivKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> ExtPrivKey {
    return try FfiConverterTypeExtPrivKey.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExtPrivKey_lower(_ value: ExtPrivKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypeExtPrivKey.lower(value)
}






public protocol ExtPubKeyProtocol: AnyObject, Sendable {
    
    func deriveChild(index: UInt32) throws  -> ExtPubKey
    
    func getPublicKey()  -> [UInt8]
    
    func toString()  -> String
    
}
open class ExtPubKey: ExtPubKeyProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_key_wallet_ffi_fn_clone_extpubkey(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_key_wallet_ffi_fn_free_extpubkey(pointer, $0) }
    }

    
public static func fromString(xpub: String)throws  -> ExtPubKey  {
    return try  FfiConverterTypeExtPubKey_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_constructor_extpubkey_from_string(
        FfiConverterString.lower(xpub),$0
    )
})
}
    

    
open func deriveChild(index: UInt32)throws  -> ExtPubKey  {
    return try  FfiConverterTypeExtPubKey_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_method_extpubkey_derive_child(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(index),$0
    )
})
}
    
open func getPublicKey() -> [UInt8]  {
    return try!  FfiConverterSequenceUInt8.lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_extpubkey_get_public_key(self.uniffiClonePointer(),$0
    )
})
}
    
open func toString() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_extpubkey_to_string(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeExtPubKey: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ExtPubKey

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ExtPubKey {
        return ExtPubKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ExtPubKey) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExtPubKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ExtPubKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExtPubKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> ExtPubKey {
    return try FfiConverterTypeExtPubKey.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExtPubKey_lower(_ value: ExtPubKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypeExtPubKey.lower(value)
}






public protocol HdWalletProtocol: AnyObject, Sendable {
    
    func deriveXpriv(path: String) throws  -> String
    
    func deriveXpub(path: String) throws  -> AccountXPub
    
    func getAccountXpriv(account: UInt32) throws  -> AccountXPriv
    
    func getAccountXpub(account: UInt32) throws  -> AccountXPub
    
    func getIdentityAuthenticationKeyAtIndex(identityIndex: UInt32, keyIndex: UInt32) throws  -> [UInt8]
    
}
open class HdWallet: HdWalletProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_key_wallet_ffi_fn_clone_hdwallet(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_key_wallet_ffi_fn_free_hdwallet(pointer, $0) }
    }

    
public static func fromMnemonic(mnemonic: Mnemonic, passphrase: String, network: Network)throws  -> HdWallet  {
    return try  FfiConverterTypeHDWallet_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_constructor_hdwallet_from_mnemonic(
        FfiConverterTypeMnemonic_lower(mnemonic),
        FfiConverterString.lower(passphrase),
        FfiConverterTypeNetwork_lower(network),$0
    )
})
}
    
public static func fromSeed(seed: [UInt8], network: Network)throws  -> HdWallet  {
    return try  FfiConverterTypeHDWallet_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_constructor_hdwallet_from_seed(
        FfiConverterSequenceUInt8.lower(seed),
        FfiConverterTypeNetwork_lower(network),$0
    )
})
}
    

    
open func deriveXpriv(path: String)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_method_hdwallet_derive_xpriv(self.uniffiClonePointer(),
        FfiConverterString.lower(path),$0
    )
})
}
    
open func deriveXpub(path: String)throws  -> AccountXPub  {
    return try  FfiConverterTypeAccountXPub_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_method_hdwallet_derive_xpub(self.uniffiClonePointer(),
        FfiConverterString.lower(path),$0
    )
})
}
    
open func getAccountXpriv(account: UInt32)throws  -> AccountXPriv  {
    return try  FfiConverterTypeAccountXPriv_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_method_hdwallet_get_account_xpriv(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(account),$0
    )
})
}
    
open func getAccountXpub(account: UInt32)throws  -> AccountXPub  {
    return try  FfiConverterTypeAccountXPub_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_method_hdwallet_get_account_xpub(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(account),$0
    )
})
}
    
open func getIdentityAuthenticationKeyAtIndex(identityIndex: UInt32, keyIndex: UInt32)throws  -> [UInt8]  {
    return try  FfiConverterSequenceUInt8.lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_method_hdwallet_get_identity_authentication_key_at_index(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(identityIndex),
        FfiConverterUInt32.lower(keyIndex),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHDWallet: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HdWallet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HdWallet {
        return HdWallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: HdWallet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HdWallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: HdWallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHDWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> HdWallet {
    return try FfiConverterTypeHDWallet.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHDWallet_lower(_ value: HdWallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHDWallet.lower(value)
}






public protocol MnemonicProtocol: AnyObject, Sendable {
    
    func phrase()  -> String
    
    func toSeed(passphrase: String)  -> [UInt8]
    
}
open class Mnemonic: MnemonicProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_key_wallet_ffi_fn_clone_mnemonic(self.pointer, $0) }
    }
public convenience init(phrase: String, language: Language)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_constructor_mnemonic_new(
        FfiConverterString.lower(phrase),
        FfiConverterTypeLanguage_lower(language),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_key_wallet_ffi_fn_free_mnemonic(pointer, $0) }
    }

    
public static func generate(language: Language, wordCount: UInt8)throws  -> Mnemonic  {
    return try  FfiConverterTypeMnemonic_lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_constructor_mnemonic_generate(
        FfiConverterTypeLanguage_lower(language),
        FfiConverterUInt8.lower(wordCount),$0
    )
})
}
    

    
open func phrase() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_mnemonic_phrase(self.uniffiClonePointer(),$0
    )
})
}
    
open func toSeed(passphrase: String) -> [UInt8]  {
    return try!  FfiConverterSequenceUInt8.lift(try! rustCall() {
    uniffi_key_wallet_ffi_fn_method_mnemonic_to_seed(self.uniffiClonePointer(),
        FfiConverterString.lower(passphrase),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMnemonic: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Mnemonic

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Mnemonic {
        return Mnemonic(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Mnemonic) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Mnemonic {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Mnemonic, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMnemonic_lift(_ pointer: UnsafeMutableRawPointer) throws -> Mnemonic {
    return try FfiConverterTypeMnemonic.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMnemonic_lower(_ value: Mnemonic) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMnemonic.lower(value)
}




public struct AccountXPriv {
    public var derivationPath: String
    public var xpriv: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(derivationPath: String, xpriv: String) {
        self.derivationPath = derivationPath
        self.xpriv = xpriv
    }
}

#if compiler(>=6)
extension AccountXPriv: Sendable {}
#endif


extension AccountXPriv: Equatable, Hashable {
    public static func ==(lhs: AccountXPriv, rhs: AccountXPriv) -> Bool {
        if lhs.derivationPath != rhs.derivationPath {
            return false
        }
        if lhs.xpriv != rhs.xpriv {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(derivationPath)
        hasher.combine(xpriv)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccountXPriv: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountXPriv {
        return
            try AccountXPriv(
                derivationPath: FfiConverterString.read(from: &buf), 
                xpriv: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AccountXPriv, into buf: inout [UInt8]) {
        FfiConverterString.write(value.derivationPath, into: &buf)
        FfiConverterString.write(value.xpriv, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountXPriv_lift(_ buf: RustBuffer) throws -> AccountXPriv {
    return try FfiConverterTypeAccountXPriv.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountXPriv_lower(_ value: AccountXPriv) -> RustBuffer {
    return FfiConverterTypeAccountXPriv.lower(value)
}


public struct AccountXPub {
    public var derivationPath: String
    public var xpub: String
    public var pubKey: [UInt8]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(derivationPath: String, xpub: String, pubKey: [UInt8]?) {
        self.derivationPath = derivationPath
        self.xpub = xpub
        self.pubKey = pubKey
    }
}

#if compiler(>=6)
extension AccountXPub: Sendable {}
#endif


extension AccountXPub: Equatable, Hashable {
    public static func ==(lhs: AccountXPub, rhs: AccountXPub) -> Bool {
        if lhs.derivationPath != rhs.derivationPath {
            return false
        }
        if lhs.xpub != rhs.xpub {
            return false
        }
        if lhs.pubKey != rhs.pubKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(derivationPath)
        hasher.combine(xpub)
        hasher.combine(pubKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccountXPub: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountXPub {
        return
            try AccountXPub(
                derivationPath: FfiConverterString.read(from: &buf), 
                xpub: FfiConverterString.read(from: &buf), 
                pubKey: FfiConverterOptionSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: AccountXPub, into buf: inout [UInt8]) {
        FfiConverterString.write(value.derivationPath, into: &buf)
        FfiConverterString.write(value.xpub, into: &buf)
        FfiConverterOptionSequenceUInt8.write(value.pubKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountXPub_lift(_ buf: RustBuffer) throws -> AccountXPub {
    return try FfiConverterTypeAccountXPub.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountXPub_lower(_ value: AccountXPub) -> RustBuffer {
    return FfiConverterTypeAccountXPub.lower(value)
}


public struct DerivationPath {
    public var path: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(path: String) {
        self.path = path
    }
}

#if compiler(>=6)
extension DerivationPath: Sendable {}
#endif


extension DerivationPath: Equatable, Hashable {
    public static func ==(lhs: DerivationPath, rhs: DerivationPath) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDerivationPath: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DerivationPath {
        return
            try DerivationPath(
                path: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DerivationPath, into buf: inout [UInt8]) {
        FfiConverterString.write(value.path, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDerivationPath_lift(_ buf: RustBuffer) throws -> DerivationPath {
    return try FfiConverterTypeDerivationPath.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDerivationPath_lower(_ value: DerivationPath) -> RustBuffer {
    return FfiConverterTypeDerivationPath.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AddressType {
    
    case p2pkh
    case p2sh
}


#if compiler(>=6)
extension AddressType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddressType: FfiConverterRustBuffer {
    typealias SwiftType = AddressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .p2pkh
        
        case 2: return .p2sh
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .p2pkh:
            writeInt(&buf, Int32(1))
        
        
        case .p2sh:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressType_lift(_ buf: RustBuffer) throws -> AddressType {
    return try FfiConverterTypeAddressType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressType_lower(_ value: AddressType) -> RustBuffer {
    return FfiConverterTypeAddressType.lower(value)
}


extension AddressType: Equatable, Hashable {}







public enum KeyWalletError: Swift.Error {

    
    
    case InvalidMnemonic(message: String)
    
    case InvalidDerivationPath(message: String)
    
    case KeyError(message: String)
    
    case Secp256k1Error(message: String)
    
    case AddressError(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeyWalletError: FfiConverterRustBuffer {
    typealias SwiftType = KeyWalletError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyWalletError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidMnemonic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .InvalidDerivationPath(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .KeyError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .Secp256k1Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .AddressError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeyWalletError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InvalidMnemonic(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .InvalidDerivationPath(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .KeyError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .Secp256k1Error(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .AddressError(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyWalletError_lift(_ buf: RustBuffer) throws -> KeyWalletError {
    return try FfiConverterTypeKeyWalletError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyWalletError_lower(_ value: KeyWalletError) -> RustBuffer {
    return FfiConverterTypeKeyWalletError.lower(value)
}


extension KeyWalletError: Equatable, Hashable {}




extension KeyWalletError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Language {
    
    case english
    case chineseSimplified
    case chineseTraditional
    case french
    case italian
    case japanese
    case korean
    case spanish
}


#if compiler(>=6)
extension Language: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLanguage: FfiConverterRustBuffer {
    typealias SwiftType = Language

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Language {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .english
        
        case 2: return .chineseSimplified
        
        case 3: return .chineseTraditional
        
        case 4: return .french
        
        case 5: return .italian
        
        case 6: return .japanese
        
        case 7: return .korean
        
        case 8: return .spanish
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Language, into buf: inout [UInt8]) {
        switch value {
        
        
        case .english:
            writeInt(&buf, Int32(1))
        
        
        case .chineseSimplified:
            writeInt(&buf, Int32(2))
        
        
        case .chineseTraditional:
            writeInt(&buf, Int32(3))
        
        
        case .french:
            writeInt(&buf, Int32(4))
        
        
        case .italian:
            writeInt(&buf, Int32(5))
        
        
        case .japanese:
            writeInt(&buf, Int32(6))
        
        
        case .korean:
            writeInt(&buf, Int32(7))
        
        
        case .spanish:
            writeInt(&buf, Int32(8))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLanguage_lift(_ buf: RustBuffer) throws -> Language {
    return try FfiConverterTypeLanguage.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLanguage_lower(_ value: Language) -> RustBuffer {
    return FfiConverterTypeLanguage.lower(value)
}


extension Language: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Network {
    
    case dash
    case testnet
    case regtest
    case devnet
}


#if compiler(>=6)
extension Network: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .dash
        
        case 2: return .testnet
        
        case 3: return .regtest
        
        case 4: return .devnet
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        switch value {
        
        
        case .dash:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        
        case .regtest:
            writeInt(&buf, Int32(3))
        
        
        case .devnet:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNetwork_lift(_ buf: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}


extension Network: Equatable, Hashable {}






#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAddress: FfiConverterRustBuffer {
    typealias SwiftType = [Address]

    public static func write(_ value: [Address], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAddress.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Address] {
        let len: Int32 = try readInt(&buf)
        var seq = [Address]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAddress.read(from: &buf))
        }
        return seq
    }
}
public func initialize()  {try! rustCall() {
    uniffi_key_wallet_ffi_fn_func_initialize($0
    )
}
}
public func validateMnemonic(phrase: String, language: Language)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeKeyWalletError_lift) {
    uniffi_key_wallet_ffi_fn_func_validate_mnemonic(
        FfiConverterString.lower(phrase),
        FfiConverterTypeLanguage_lower(language),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_key_wallet_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_func_initialize() != 10980) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_func_validate_mnemonic() != 19691) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_address_get_network() != 56082) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_address_get_script_pubkey() != 41970) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_address_get_type() != 59697) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_address_to_string() != 28864) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_addressgenerator_generate() != 27275) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_addressgenerator_generate_range() != 31732) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_extprivkey_derive_child() != 10335) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_extprivkey_get_xpub() != 21777) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_extprivkey_to_string() != 19162) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_extpubkey_derive_child() != 65260) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_extpubkey_get_public_key() != 37196) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_extpubkey_to_string() != 1086) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_hdwallet_derive_xpriv() != 52055) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_hdwallet_derive_xpub() != 53255) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_hdwallet_get_account_xpriv() != 16460) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_hdwallet_get_account_xpub() != 7799) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_hdwallet_get_identity_authentication_key_at_index() != 4183) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_mnemonic_phrase() != 52878) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_method_mnemonic_to_seed() != 43852) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_constructor_address_from_public_key() != 21585) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_constructor_address_from_string() != 32169) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_constructor_addressgenerator_new() != 22107) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_constructor_extprivkey_from_string() != 34587) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_constructor_extpubkey_from_string() != 33785) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_constructor_hdwallet_from_mnemonic() != 15255) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_constructor_hdwallet_from_seed() != 22343) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_constructor_mnemonic_generate() != 22856) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_key_wallet_ffi_checksum_constructor_mnemonic_new() != 16613) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureKeyWalletFfiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all